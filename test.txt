可以。下面这份 按你同事风格（拷贝目标目录、按架构处理、简洁脚本段）的 spec，已替你适配到你的项目（Python+venv、带 systemd 服务、离线优先装依赖、保留源码不删 .py）。

Name:           kylin-ai-cryptojacking-detect
Version:        1.0.0
Release:        1%{?dist}
Summary:        Kylin AI Cryptojacking Detect
License:        Proprietary
URL:            http://www.kylinos.cn
Source0:        %{name}-%{version}.tar.gz

BuildArch:      noarch
ExcludeArch:    loongarch64

# 运行期依赖（创建 venv & systemd）
Requires:       python3 >= 3.6
Requires:       systemd

%description
Python-based cryptojacking detector. Installs to /opt/%{name}, creates
a dedicated venv, and provides a systemd service.

%prep
%setup -q

%build
# nothing

%install
# 目录就绪
mkdir -p %{buildroot}/usr/bin
mkdir -p %{buildroot}/opt/%{name}
mkdir -p %{buildroot}/etc/systemd/system

# 拷贝业务负载（按你同事风格从源码包复制到目标路径）
cp -a %{_builddir}/%{name}-%{version}/opt/%{name}/* \
      %{buildroot}/opt/%{name}/

# 包装启动器（/usr/bin/%{name}；内容随 Source0 提供）
install -m 0755 %{_builddir}/%{name}-%{version}/usr/bin/%{name} \
        %{buildroot}/usr/bin/%{name}

# systemd 单元
install -m 0644 %{_builddir}/%{name}-%{version}/%{name}.service \
        %{buildroot}/etc/systemd/system/%{name}.service

# 仅编译字节码，保留源码，避免入口被删
python3 -m compileall -q -j0 %{buildroot}/opt/%{name} || :

# 根据架构裁剪 wheelhouse
%ifarch x86_64
rm -rf %{buildroot}/opt/%{name}/wheelhouse_aarch64
%endif
%ifarch aarch64
rm -rf %{buildroot}/opt/%{name}/wheelhouse_x86_64
%endif

%post
# 创建 venv，并“离线优先、在线兜底”安装依赖
set -e
INSTALL_DIR="/opt/%{name}"
VENV="$INSTALL_DIR/%{name}-venv"
PY="$VENV/bin/python3"
PIP="$VENV/bin/pip"

[ -x "$PY" ] || python3 -m venv "$VENV"
"$PY" -m ensurepip --upgrade >/dev/null 2>&1 || :

case "$(uname -m)" in
  x86_64)  WH="$INSTALL_DIR/wheelhouse_x86_64" ;;
  aarch64) WH="$INSTALL_DIR/wheelhouse_aarch64" ;;
  *) echo "Unsupported arch: $(uname -m)" >&2; exit 1 ;;
esac

if [ -s "$INSTALL_DIR/requirements.txt" ]; then
  if ! "$PIP" install --no-index --find-links="$WH" -r "$INSTALL_DIR/requirements.txt"; then
    if [ "${KACD_OFFLINE_ONLY:-0}" -eq 1 ]; then
      echo "Offline-only & missing wheels in $WH" >&2; exit 1
    fi
    "$PIP" install -r "$INSTALL_DIR/requirements.txt"
  fi
fi

chmod 755 /usr/bin/%{name} || :
systemctl daemon-reload >/dev/null 2>&1 || :
systemctl enable %{name}.service >/dev/null 2>&1 || :
exit 0

%preun
# 卸载时停用服务
if [ "$1" -eq 0 ]; then
  systemctl stop %{name}.service >/dev/null 2>&1 || :
  systemctl disable %{name}.service >/dev/null 2>&1 || :
fi

%postun
systemctl daemon-reload >/dev/null 2>&1 || :

%files
# 先排除，后整体收录，再以 config 方式单列，避免“被列出两次”警告
%exclude /opt/%{name}/src/miner_sentinel_l1/src/config/monitoring_rules.yaml
%exclude /opt/%{name}/src/miner_sentinel_l2/src/config/pid_whitelist.yaml
/opt/%{name}
/usr/bin/%{name}
/etc/systemd/system/%{name}.service
%config(noreplace) /opt/%{name}/src/miner_sentinel_l1/src/config/monitoring_rules.yaml
%config(noreplace) /opt/%{name}/src/miner_sentinel_l2/src/config/pid_whitelist.yaml

%changelog
* Thu Oct 23 2025 You <you@example.com> 1.0.0-1
- Follow colleague's concise style: copy payload, arch prune, simple scriptlets.
- Keep .py sources; compile only.
- Offline-first dependency install with optional online fallback (KACD_OFFLINE_ONLY=1 to forbid).

你的 Source0（%{name}-%{version}.tar.gz）里需要包含

opt/kylin-ai-cryptojacking-detect/：src/ 源码、requirements.txt、wheelhouse_x86_64/ 与（可选）wheelhouse_aarch64/

usr/bin/kylin-ai-cryptojacking-detect：包装启动器（内部需调用 …/python3 …/src/cryptojacking_detect.py --monitor）

kylin-ai-cryptojacking-detect.service：systemd 单元（ExecStart=/usr/bin/kylin-ai-cryptojacking-detect）

构建与安装（在项目根）
# 放好 Source0 后：
rpmbuild --define "_topdir $(pwd)/.rpmbuild" -ba .rpmbuild/SPECS/kylin-ai-cryptojacking-detect.spec

# 安装
sudo rpm -Uvh .rpmbuild/RPMS/noarch/kylin-ai-cryptojacking-detect-*.noarch.rpm
sudo systemctl restart kylin-ai-cryptojacking-detect.service


这样既保留了你同事那种“简洁拷贝式”的写法，又解决了你之前遇到的 .py 丢失、依赖缺失和 %files 警告问题。