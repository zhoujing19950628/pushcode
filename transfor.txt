1) 写一份“无宏”spec（不需要 pyproject-rpm-macros / redhat-rpm-config）

如果你的仓库里暂时没有 python3-pandas 这个包，请先按下面模板把它从 Requires 里删掉；以后有仓库再加回。

NAME=kylin-ai-cryptojacking-detect
VER=0.1.0

# 把 spec 直接写到 ~/rpmbuild/SPECS/
cat > "$HOME/rpmbuild/SPECS/${NAME}.spec" <<'SPEC'
Name:           kylin-ai-cryptojacking-detect
Version:        0.1.0
Release:        1%{?dist}
Summary:        Cryptojacking detector (Python CLI)
License:        MIT
URL:            https://example.com/kylin-ai-cryptojacking-detect
Source0:        %{name}-%{version}.tar.gz
BuildArch:      noarch

# 不用 pyproject 宏；只要这些基础构建依赖
BuildRequires:  python3
BuildRequires:  python3-pip
BuildRequires:  python3-setuptools
BuildRequires:  python3-wheel
BuildRequires:  findutils
BuildRequires:  coreutils

# 运行时依赖（仓库没有的先删掉）
Requires:       python3
Requires:       python3-psutil
# Requires:     python3-pandas
Requires:       python3-pyyaml

%description
A simple command-line cryptojacking detector for Linux.

%prep
%autosetup -n %{name}-%{version}

%build
# 直接用系统 python 构建 wheel；在线环境可升级工具，离线就删掉第一行
python3 -m pip install --upgrade pip setuptools wheel build || :
python3 -m build -w --no-isolation

%install
# 把刚生成的 wheel 安装到构建根
python3 -m pip install --no-deps --no-index \
    --prefix /usr --root %{buildroot} dist/*.whl

# 若没有自动生成 CLI，则手动放一个包装器
if [ ! -x "%{buildroot}/usr/bin/cryptojacking-detect" ]; then
  install -Dpm0755 /dev/stdin %{buildroot}/usr/bin/cryptojacking-detect <<'EOF'
#!/usr/bin/python3
from cryptojacking_detect import main
if __name__ == "__main__":
    raise SystemExit(main())
EOF
fi

# 安装 YAML 到 /etc/%{name}（按你的实际路径改源目录）
CONFIGDIR=%{buildroot}%{_sysconfdir}/%{name}
mkdir -p "$CONFIGDIR"
find src/miner_sentinel_l1 -type f \( -name '*.yaml' -o -name '*.yml' \) -print0 \
 | xargs -0 -r install -m 0644 -t "$CONFIGDIR"

# 生成 %files 清单（先全量收集，再把 /etc 标记为配置）
( cd %{buildroot} && find . -type f -printf "/%%P\n" | sort -u ) > installed-files.list
if [ -d "%{buildroot}%{_sysconfdir}/%{name}" ]; then
  awk 'BEGIN{cfg="/etc/%{name}/"} { if (index($0,cfg)==1) print "%%config(noreplace) "$0; else print $0 }' \
      installed-files.list > installed-files.list.new && mv installed-files.list.new installed-files.list
fi

%files -f installed-files.list
# %license LICENSE*
# %doc README* CHANGELOG*

%changelog
* Thu Oct 23 2025 You <you@example.com> - 0.1.0-1
- Initial RPM release without pyproject macros
SPEC

2) 打 Source0 源码包到 ~/rpmbuild/SOURCES/
tmp=$(mktemp -d); mkdir -p "$tmp/${NAME}-${VER}"
rsync -a --delete --exclude ".git" ./ "$tmp/${NAME}-${VER}/"
tar -C "$tmp" -czf "$HOME/rpmbuild/SOURCES/${NAME}-${VER}.tar.gz" "${NAME}-${VER}"
rm -rf "$tmp"


注意：你的源码里务必包含之前补的 src/miner_sentinel_l3/src/memory_info.py 和所有 __init__.py。

3) 构建
rpmbuild -ba "$HOME/rpmbuild/SPECS/${NAME}.spec"


成功后产物在：

~/rpmbuild/RPMS/noarch/${NAME}-${VER}-1.noarch.rpm
~/rpmbuild/SRPMS/${NAME}-${VER}-1.src.rpm

4) 安装验证
# 用 dnf/yum 安装
sudo dnf -y install ~/rpmbuild/RPMS/noarch/${NAME}-${VER}-1.noarch.rpm \
  || sudo yum -y localinstall ~/rpmbuild/RPMS/noarch/${NAME}-${VER}-1.noarch.rpm

# 验证命令与配置
which cryptojacking-detect
cryptojacking-detect --help
ls -l /etc/${NAME}/

如果仍想用 %pyproject_* 宏（可选）

那就需要把包含 pyproject-rpm-macros 的软件源启用（或手工安装那个 noarch RPM）。但在你的发行版里没有该包的情况下，上面的“无宏 spec”是最稳妥的路径。

出新报错，把 rpmbuild 最后 30 行贴我，我再对症改一行即可。