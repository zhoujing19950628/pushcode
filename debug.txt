Name:           kylin-ai-cryptojacking-detect
Version:        0.1.0
Release:        1%{?dist}
Summary:        Kylin AI Cryptojacking Detection Tool
License:        MIT
URL:            http://www.kylinos.cn
Source0:        %{name}-%{version}.tar.gz
BuildArch:      noarch

# 关闭自动 .pyc，避免“未打包文件”错误
%undefine __brp_python_bytecompile
%global _python_bytecompile 0

BuildRequires:  python3
BuildRequires:  coreutils
BuildRequires:  findutils

Requires:       python3
Requires:       python3-psutil
Requires:       python3-pyyaml
# 如果你的代码真的用到再加：
# Requires:    python3-numpy
# Requires:    python3-pandas

%description
Kylin AI cryptojacking detection tool for Linux.

%prep
%autosetup -n %{name}-%{version}

%build
# 纯 Python，无需编译

%install
# 代码安装到 /usr/libexec/<name>，运行时由启动器注入 PYTHONPATH
APPDIR=%{buildroot}%{_libexecdir}/%{name}
install -d "$APPDIR"
cp -a src/* "$APPDIR/"

# 配置文件安装到 /etc/<name>
CFGDIR=%{buildroot}%{_sysconfdir}/%{name}
install -d "$CFGDIR"
test -d src/miner_sentinel_l1/src/config && \
  find src/miner_sentinel_l1/src/config -type f \( -name '*.yaml' -o -name '*.yml' \) -print0 \
  | xargs -0 -r install -m0644 -t "$CFGDIR"
test -d src/miner_sentinel_l2/src/config && \
  find src/miner_sentinel_l2/src/config -type f \( -name '*.yaml' -o -name '*.yml' \) -print0 \
  | xargs -0 -r install -m0644 -t "$CFGDIR"

# /usr/bin 启动器（把 APPDIR 加入 PYTHONPATH，执行你的主脚本）
install -Dpm0755 /dev/stdin %{buildroot}%{_bindir}/cryptojacking-detect <<'EOF'
#!/bin/sh
APPDIR="/usr/libexec/kylin-ai-cryptojacking-detect"
export PYTHONPATH="$APPDIR${PYTHONPATH:+:$PYTHONPATH}"
exec /usr/bin/python3 "$APPDIR/cryptojacking_detect.py" "$@"
EOF

# 生成 %files 清单并标记配置文件
( cd %{buildroot} && find . -type f -printf "/%P\n" | sort -u ) > installed-files.list
awk 'BEGIN{cfg="/etc/%{name}/"} { if (index($0,cfg)==1) print "%config(noreplace) "$0; else print $0 }' \
    installed-files.list > installed-files.list.new && mv installed-files.list.new installed-files.list

%files -f installed-files.list

%changelog
* Mon Oct 27 2025 You <you@example.com> 0.1.0-1
- First in-repo build; outputs to ./dist and ./.rpmbuild

----------------------

#!/usr/bin/env bash
set -euo pipefail

NAME=kylin-ai-cryptojacking-detect
VER=0.1.0

# 1) 准备 in-repo rpmbuild 树 & dist 目录
mkdir -p .rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} dist packaging/rpm

# 2) 放 spec（你已经放在 packaging/rpm/ 了）
cp -f packaging/rpm/${NAME}.spec .rpmbuild/SPECS/${NAME}.spec

# 3) 打 Source0（以 Name-Version 为顶层目录）
TMP="$(mktemp -d)"
STAGE="$TMP/${NAME}-${VER}"
mkdir -p "$STAGE"
# 拷项目内容到临时 staging；排除构建产物自身
rsync -a --delete \
  --exclude ".git" --exclude ".rpmbuild" --exclude "dist" \
  ./ "$STAGE/"

tar -C "$TMP" -czf ".rpmbuild/SOURCES/${NAME}-${VER}.tar.gz" "${NAME}-${VER}"
rm -rf "$TMP"

# 4) 构建（topdir 指向项目内）
rpmbuild --define "_topdir $PWD/.rpmbuild" -ba ".rpmbuild/SPECS/${NAME}.spec"

# 5) 收集产物到 dist/
cp -av .rpmbuild/RPMS/*/*.rpm dist/ 2>/dev/null || true
cp -av .rpmbuild/SRPMS/*.src.rpm dist/ 2>/dev/null || true
cp -av .rpmbuild/SOURCES/${NAME}-${VER}.tar.gz dist/ 2>/dev/null || true

echo
echo "✅ 构建完成，产物在 ./dist/ ："
ls -l dist/

