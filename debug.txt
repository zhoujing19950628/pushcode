# 0) 变量（当前 shell 必须重新定义）
NAME="kylin-ai-cryptojacking-detect"
VERSION="1.0.0"
TOPDIR="$(pwd)/.rpmbuild"
PKGDIR="$(pwd)/packaging"
LAYOUT="$PKGDIR/${NAME}-${VERSION}"

# 1) 准备 rpmbuild 目录
mkdir -p "$TOPDIR"/{SOURCES,SPECS,BUILD,BUILDROOT,RPMS,SRPMS}

# 2) 生成 tarball 的目录结构（必须含有 opt/$NAME 等，和我们 spec 匹配）
rm -rf "$PKGDIR"
mkdir -p "$LAYOUT/opt/$NAME"
mkdir -p "$LAYOUT/usr/local/bin"
mkdir -p "$LAYOUT/opt/$NAME/wheelhouse_x86_64" "$LAYOUT/opt/$NAME/wheelhouse_aarch64"

# 拷贝你的源码（保持已有目录树）
cp -a src "$LAYOUT/opt/$NAME/"

# 生成运行脚本（若你已手动创建过，可跳过）
cat > "$LAYOUT/usr/local/bin/$NAME" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
INSTALL_DIR="/opt/kylin-ai-cryptojacking-detect"
VENV="$INSTALL_DIR/kylin-ai-cryptojacking-detect-venv"
exec "$VENV/bin/python3" "$INSTALL_DIR/src/cryptojacking_detect.py" --monitor "$@"
EOF
chmod 755 "$LAYOUT/usr/local/bin/$NAME"

# systemd unit（若你已手动创建过，可跳过）
cat > "$LAYOUT/${NAME}.service" <<'EOF'
[Unit]
Description=Kylin AI Cryptojacking Detect
After=network.target
[Service]
Type=simple
ExecStart=/usr/local/bin/kylin-ai-cryptojacking-detect
Restart=always
RestartSec=3
WorkingDirectory=/opt/kylin-ai-cryptojacking-detect
Environment=PYTHONUNBUFFERED=1
[Install]
WantedBy=multi-user.target
EOF

# requirements（按需改）
cat > "$LAYOUT/opt/$NAME/requirements.txt" <<'EOF'
psutil
pandas
PyYAML
websocket-client
scikit-learn
EOF

# 3) 打 Source0（名字一定要精确等于 %{name}-%{version}.tar.gz）
( cd "$PKGDIR" && tar czf "$TOPDIR/SOURCES/${NAME}-${VERSION}.tar.gz" "${NAME}-${VERSION}" )

# 验证：应该能看到这个 tar.gz
ls -l "$TOPDIR/SOURCES/${NAME}-${VERSION}.tar.gz"
tar tzf "$TOPDIR/SOURCES/${NAME}-${VERSION}.tar.gz" | head

# 4) 构建（确保 spec 已放在 .rpmbuild/SPECS/${NAME}.spec）
rpmbuild --define "_topdir $TOPDIR" -ba "$TOPDIR/SPECS/${NAME}.spec"
如果仍报找不到 Source0，多半是 名字不一致。用这两条快速自检：

bash
复制代码
# 看 spec 实际展开的 Source0 是啥
rpmspec -P ".rpmbuild/SPECS/${NAME}.spec" | grep -E '^Name:|^Version:|^Source0:'

# 看 SOURCES 里是否真的有同名文件
ls -l ".rpmbuild/SOURCES/${NAME}-${VERSION}.tar.gz"
关键点回顾

%prep 会去 .rpmbuild/SOURCES/%{name}-%{version}.tar.gz 解包；必须事先把这个 tar.gz 做好。

tarball 内层目录名也要叫 ${NAME}-${VERSION}，且包含我们在 %install 里要 cp 的 opt/${NAME}/...、${NAME}.service、usr/local/bin/${NAME} 等路径，否则后续 %install 还会报 “No such file or directory”。

你之前终端里出现过 ^C（Ctrl-C），很可能中断了打包素材的生成，导致 SOURCES 里空的；按上面一步到位重跑即可。